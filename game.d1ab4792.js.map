{"version":3,"sources":["game.js"],"names":["preload","load","image","gameState","score","create","_this","player","physics","add","sprite","setScale","platforms","staticGroup","refreshBody","scoreText","text","fontSize","fill","setCollideWorldBounds","collider","cursors","input","keyboard","createCursorKeys","bugs","group","maxBugs","bugGenLoop","time","addEvent","delay","callback","getChildren","length","xCoord","Math","random","setVelocityY","bugGen","callbackScope","loop","bug","destroy","setText","concat","pause","on","scene","restart","update","left","isDown","setVelocityX","right","config","type","Phaser","AUTO","width","height","backgroundColor","default","arcade","gravity","y","enableBody","game","Game"],"mappings":";AACA,SAASA,IACP,KAAKC,KAAKC,MACR,OACA,yEAEF,KAAKD,KAAKC,MACR,OACA,yEAEF,KAAKD,KAAKC,MACR,OACA,yEAEF,KAAKD,KAAKC,MACR,WACA,4EAEF,KAAKD,KAAKC,MACR,QACA,yEAKJ,IAAMC,EAAY,CAChBC,MAAO,GAIT,SAASC,IAAS,IAAAC,EAAA,KAEhBH,EAAUI,OAAS,KAAKC,QAAQC,IAAIC,OAAO,IAAK,IAAK,SAASC,SAAS,IAGvE,IAAMC,EAAY,KAAKJ,QAAQC,IAAII,cACnCD,EAAUP,OAAO,IAAK,IAAK,YAAYM,SAAS,EAAG,IAAKG,cAGxDX,EAAUY,UAAY,KAAKN,IAAIO,KAAK,IAAK,IAAK,WAAY,CACxDC,SAAU,OACVC,KAAM,YAIRf,EAAUI,OAAOY,uBAAsB,GACvC,KAAKX,QAAQC,IAAIW,SAASjB,EAAUI,OAAQK,GAG5CT,EAAUkB,QAAU,KAAKC,MAAMC,SAASC,mBAGxC,IAAMC,EAAO,KAAKjB,QAAQC,IAAIiB,QAa9B,IAAMC,EAAU,EAGVC,EAAa,KAAKC,KAAKC,SAAS,CACpCC,MAAO,IACPC,SAAU,WAAA,OAfZ,WACE,GAAIP,EAAKQ,cAAcC,OAASP,EAAS,CACvC,IAAMQ,EAAyB,IAAhBC,KAAKC,SACRZ,EAAKpB,OAAO8B,EAAQ,GAAI,QAGhCG,aAAa,KASHC,IAChBC,cAAe,KACfC,MAAM,IAIR,KAAKjC,QAAQC,IAAIW,SAASK,EAAMb,EAAW,SAAU8B,GACnDA,EAAIC,UACJxC,EAAUC,OAAS,GACnBD,EAAUY,UAAU6B,QAAOC,UAAAA,OAAW1C,EAAUC,UAIlD,KAAKI,QAAQC,IAAIW,SAASjB,EAAUI,OAAQkB,EAAM,WAChDG,EAAWe,UACXrC,EAAKE,QAAQsC,QACbxC,EAAKG,IAAIO,KAAK,IAAK,IAAK,YAAa,CAAEC,SAAU,OAAQC,KAAM,YAC/DZ,EAAKG,IAAIO,KAAK,IAAK,IAAK,mBAAoB,CAC1CC,SAAU,OACVC,KAAM,YAIRZ,EAAKgB,MAAMyB,GAAG,YAAa,WACzB5C,EAAUC,MAAQ,EAClBE,EAAK0C,MAAMC,cAMjB,SAASC,IACH/C,EAAUkB,QAAQ8B,KAAKC,OACzBjD,EAAUI,OAAO8C,cAAc,KACtBlD,EAAUkB,QAAQiC,MAAMF,OACjCjD,EAAUI,OAAO8C,aAAa,KAE9BlD,EAAUI,OAAO8C,aAAa,GAKlC,IAAME,EAAS,CACbC,KAAMC,OAAOC,KACbC,MAAO,IACPC,OAAQ,IACRC,gBAAiB,SACjBrD,QAAS,CACPsD,QAAS,SACTC,OAAQ,CACNC,QAAS,CAAEC,EAAG,KACdC,YAAY,IAGhBlB,MAAO,CACLhD,QAAAA,EACAK,OAAAA,EACA6C,OAAAA,IAKEiB,EAAO,IAAIV,OAAOW,KAAKb","file":"game.d1ab4792.js","sourceRoot":"..","sourcesContent":["// Preloading game assets such as images\nfunction preload() {\n  this.load.image(\n    \"bug1\",\n    \"https://content.codecademy.com/courses/learn-phaser/physics/bug_1.png\"\n  );\n  this.load.image(\n    \"bug2\",\n    \"https://content.codecademy.com/courses/learn-phaser/physics/bug_2.png\"\n  );\n  this.load.image(\n    \"bug3\",\n    \"https://content.codecademy.com/courses/learn-phaser/physics/bug_3.png\"\n  );\n  this.load.image(\n    \"platform\",\n    \"https://content.codecademy.com/courses/learn-phaser/physics/platform.png\"\n  );\n  this.load.image(\n    \"codey\",\n    \"https://content.codecademy.com/courses/learn-phaser/physics/codey.png\"\n  );\n}\n\n// Define the game state and initialize variables\nconst gameState = {\n  score: 0\n};\n\n// Creating the game world\nfunction create() {\n  // Create the player character and set its initial position and scale\n  gameState.player = this.physics.add.sprite(225, 450, \"codey\").setScale(0.5);\n\n  // Create static platforms\n  const platforms = this.physics.add.staticGroup();\n  platforms.create(225, 490, \"platform\").setScale(1, 0.3).refreshBody();\n\n  // Create and display the score text\n  gameState.scoreText = this.add.text(195, 485, \"Score: 0\", {\n    fontSize: \"15px\",\n    fill: \"#000000\"\n  });\n\n  // Set the player to collide with the game world bounds and platforms\n  gameState.player.setCollideWorldBounds(true);\n  this.physics.add.collider(gameState.player, platforms);\n\n  // Enable keyboard cursor keys for player movement\n  gameState.cursors = this.input.keyboard.createCursorKeys();\n\n  // Create a group for bugs (enemies)\n  const bugs = this.physics.add.group();\n\n  // Function to generate bugs periodically\n  function bugGen() {\n    if (bugs.getChildren().length < maxBugs) {\n      const xCoord = Math.random() * 450;\n      const bug = bugs.create(xCoord, 10, \"bug1\");\n\n      // Set the bug's velocity to make it move slower\n      bug.setVelocityY(20); // Adjust the value to control the speed\n    }\n  }\n\n  const maxBugs = 5; // Set the maximum number of bugs you want in the game\n\n  // Set up a timer event to call bugGen every 100 milliseconds\n  const bugGenLoop = this.time.addEvent({\n    delay: 1000,\n    callback: () => bugGen(maxBugs), // Pass maxBugs as an argument\n    callbackScope: this,\n    loop: true\n  });\n\n  // Detect collisions between bugs, platforms, and update the score\n  this.physics.add.collider(bugs, platforms, function (bug) {\n    bug.destroy();\n    gameState.score += 10;\n    gameState.scoreText.setText(`Score: ${gameState.score}`);\n  });\n\n  // Detect collisions between the player and bugs\n  this.physics.add.collider(gameState.player, bugs, () => {\n    bugGenLoop.destroy();\n    this.physics.pause();\n    this.add.text(180, 250, \"Game Over\", { fontSize: \"15px\", fill: \"#000000\" });\n    this.add.text(152, 270, \"Click to Restart\", {\n      fontSize: \"15px\",\n      fill: \"#000000\"\n    });\n\n    // Add a click event to restart the game when the player clicks\n    this.input.on(\"pointerup\", () => {\n      gameState.score = 0;\n      this.scene.restart();\n    });\n  });\n}\n\n// Update function to handle player movement\nfunction update() {\n  if (gameState.cursors.left.isDown) {\n    gameState.player.setVelocityX(-160);\n  } else if (gameState.cursors.right.isDown) {\n    gameState.player.setVelocityX(160);\n  } else {\n    gameState.player.setVelocityX(0);\n  }\n}\n\n// Configure the game using Phaser\nconst config = {\n  type: Phaser.AUTO,\n  width: 450,\n  height: 500,\n  backgroundColor: \"b9eaff\",\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      gravity: { y: 200 },\n      enableBody: true\n    }\n  },\n  scene: {\n    preload,\n    create,\n    update\n  }\n};\n\n// Create a new Phaser game instance with the specified configuration\nconst game = new Phaser.Game(config);\n"]}